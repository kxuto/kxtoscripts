local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

local ESPEnabled = false
local ESPToggleKey = Enum.KeyCode.F5
local TargetPlayerCount = 17 -- Target player count for server hopping (currently unused in server hopping logic)
local GameId = 2809202155 -- Game ID for server hopping
local CurrentServerId = game.JobId -- Store the current server's job ID

local TotalKills = 0
local TotalValidPlayers = 0
local LastQuestProgress = nil

-- Create the GUI
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 100, 0, 50)
ToggleButton.Position = UDim2.new(0, 10, 0, 10)
ToggleButton.Text = "ESP: OFF"
ToggleButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.Parent = ScreenGui

local HopButton = Instance.new("TextButton")
HopButton.Size = UDim2.new(0, 100, 0, 50)
HopButton.Position = UDim2.new(0, 120, 0, 10)
HopButton.Text = "Hop Server"
HopButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
HopButton.TextColor3 = Color3.new(1, 1, 1)
HopButton.Parent = ScreenGui

local CounterLabel = Instance.new("TextLabel")
CounterLabel.Size = UDim2.new(0, 200, 0, 50)
CounterLabel.Position = UDim2.new(0, 230, 0, 10)
CounterLabel.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
CounterLabel.TextColor3 = Color3.new(1, 1, 1)
CounterLabel.Text = "Kills: 0 / Valid: 0"
CounterLabel.Parent = ScreenGui

-- Kill Counter UI
local KillCounterGui = Instance.new("TextLabel")
KillCounterGui.Size = UDim2.new(0, 250, 0, 50)
KillCounterGui.Position = UDim2.new(0, 10, 0, 130)
KillCounterGui.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
KillCounterGui.TextColor3 = Color3.new(1, 1, 1)
KillCounterGui.TextScaled = true
KillCounterGui.Text = "Kills: 0"
KillCounterGui.Name = "KillCounterUI"
KillCounterGui.Parent = LocalPlayer:WaitForChild("PlayerGui")



local function UpdateCounter()
    CounterLabel.Text = "Kills: " .. TotalKills .. " / Valid: " .. TotalValidPlayers
end

local function CreateESP(Player, part)
    local box = Instance.new("BoxHandleAdornment")
    box.Size = part.Size + Vector3.new(0.1, 0.1, 0.1)
    box.Adornee = part
    box.AlwaysOnTop = true
    box.ZIndex = 10
    box.Transparency = 0.5
    box.Color3 = Color3.new(1, 0, 0)
    box.Parent = part

    local Character = Player.Character
    if not Character then return end

    local NameTag = Instance.new("BillboardGui")
    NameTag.Size = UDim2.new(0, 200, 0, 50)
    NameTag.StudsOffset = Vector3.new(0, 2, 0)
    NameTag.Adornee = Character:FindFirstChild("Head")
    NameTag.AlwaysOnTop = true
    NameTag.Parent = Character

    local NameLabel = Instance.new("TextLabel")
    NameLabel.Size = UDim2.new(1, 0, 1, 0)
    NameLabel.Text = Player.Name
    NameLabel.TextColor3 = Color3.new(1, 1, 1)
    NameLabel.BackgroundTransparency = 1
    NameLabel.Parent = NameTag
end

local function RemoveESP(part)
    for _, child in ipairs(part:GetChildren()) do
        if child:IsA("BoxHandleAdornment") or child:IsA("BillboardGui") then
            child:Destroy()
        end
    end
    local character = Players:GetPlayerFromCharacter(part.Parent)
    if character then
        local head = character.Character:FindFirstChild("Head")
        if head then
            for _, child in ipairs(head:GetChildren()) do
                if child:IsA("BillboardGui") then
                    child:Destroy()
                end
            end
        end
    end
end

local function CheckValidStand(standName)
    local validStands = {
        "Star Platinum", "Hermit Purple", "Star Platinum: The World",
        "Crazy Diamond", "Gold Experience", "Gold Experience Requiem",
        "Stone Free", "Tusk ACT 1", "Tusk ACT 2", "Tusk ACT 3",
        "Tusk ACT 4", "Soft & Wet", "Soft & Wet Go Beyond"
    }
    return table.find(validStands, standName) ~= nil
end

local function UpdateESP()
    TotalValidPlayers = 0
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local playerStats = player:FindFirstChild("PlayerStats")
            if playerStats then
                local standValue = playerStats:FindFirstChild("Stand")
                if standValue and CheckValidStand(standValue.Value) then
                    TotalValidPlayers += 1
                    local playerModel = workspace.Living:FindFirstChild(player.Name)
                    if playerModel then
                        for _, part in ipairs(playerModel:GetDescendants()) do
                            if part:IsA("BasePart") then
                                if ESPEnabled then
                                    CreateESP(player, part)
                                else
                                    RemoveESP(part)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    UpdateCounter()
end

local function OnPlayerAdded(player)
    player.CharacterAdded:Connect(function()
        local playerStats = player:FindFirstChild("PlayerStats")
        if playerStats then
            local standValue = playerStats:FindFirstChild("Stand")
            if standValue and CheckValidStand(standValue.Value) then
                local playerModel = workspace.Living:FindFirstChild(player.Name)
                if playerModel then
                    for _, part in ipairs(playerModel:GetDescendants()) do
                        if part:IsA("BasePart") then
                            if ESPEnabled then
                                CreateESP(player, part)
                            end
                        end
                    end
                end
            end
        end
        UpdateESP()
    end)
end

local function OnPlayerRemoving(player)
    local playerModel = workspace.Living:FindFirstChild(player.Name)
    if playerModel then
        for _, part in ipairs(playerModel:GetDescendants()) do
            if part:IsA("BasePart") then
                RemoveESP(part)
            end
        end
    end
    UpdateESP()
end

Players.PlayerAdded:Connect(OnPlayerAdded)
Players.PlayerRemoving:Connect(OnPlayerRemoving)

ToggleButton.MouseButton1Click:Connect(function()
    ESPEnabled = not ESPEnabled
    UpdateESP()
    ToggleButton.Text = ESPEnabled and "ESP: ON" or "ESP: OFF"
    ToggleButton.BackgroundColor3 = ESPEnabled and Color3.new(0, 0.5, 0) or Color3.new(0.2, 0.2, 0.2)
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == ESPToggleKey then
        ESPEnabled = not ESPEnabled
        UpdateESP()
        ToggleButton.Text = ESPEnabled and "ESP: ON" or "ESP: OFF"
        ToggleButton.BackgroundColor3 = ESPEnabled and Color3.new(0, 0.5, 0) or Color3.new(0.2, 0.2, 0.2)
    end
end)

for _, player in pairs(Players:GetPlayers()) do
    OnPlayerAdded(player)
end

local function CheckCurrentServer()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local playerStats = player:FindFirstChild("PlayerStats")
            if playerStats then
                local standValue = playerStats:FindFirstChild("Stand")
                if standValue and CheckValidStand(standValue.Value) then
                    return true
                end
            end
        end
    end
    return false
end

local function HopServer()
    local PlaceID = GameId
    local TPS = TeleportService
    local Http = HttpService
    local Player = LocalPlayer

    local Servers = Http:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..PlaceID.."/servers/Public?sortOrder=Asc&limit=100"))

    for _, v in pairs(Servers.data) do
        if v.playing < v.maxPlayers and v.id ~= game.JobId then
            TPS:TeleportToPlaceInstance(PlaceID, v.id, Player)
            return
        end
    end
    warn("No suitable servers found. Staying in current server.")
end

HopButton.MouseButton1Click:Connect(function()
    HopServer()
end)

local function AutoHopServer()
    local PlaceID = GameId
    local TPS = TeleportService
    local Http = HttpService
    local Player = LocalPlayer

    local Servers = Http:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..PlaceID.."/servers/Public?sortOrder=Asc&limit=100"))

    if not CheckCurrentServer() then
        print("No players with required skills found. Hopping to another server...")
        for _, v in pairs(Servers.data) do
            if v.playing < v.maxPlayers and v.id ~= game.JobId then
                TPS:TeleportToPlaceInstance(PlaceID, v.id, Player)
                return
            end
        end
        warn("No suitable servers found. Staying in current server.")
    else
        print("Players with required skills found. Staying in the current server.")
    end
end

AutoHopServer()

-- Ctrl teleport
local CtrlHeld = false
local TeleportDistance = 10
local TeleportInterval = 0.05

UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
        CtrlHeld = true
        local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local RootPart = Character:WaitForChild("HumanoidRootPart")

        while CtrlHeld do
            if not Character or not RootPart or not RootPart.Parent then
                CtrlHeld = false
                break
            end
            local Direction = RootPart.CFrame.LookVector
            RootPart.CFrame = RootPart.CFrame + Direction * TeleportDistance
            wait(TeleportInterval)
        end
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
        CtrlHeld = false
    end
end)

-- Kill tracking from QuestProgress
local function TrackKills()
    local playerStats = LocalPlayer:WaitForChild("PlayerStats", 10)
    if not playerStats then return end

    local questProgress = playerStats:WaitForChild("QuestProgress", 10)
    if not questProgress then return end

    LastQuestProgress = questProgress.Value

    questProgress:GetPropertyChangedSignal("Value"):Connect(function()
        if questProgress.Value > LastQuestProgress then
            TotalKills += 1
            UpdateCounter()
        end
        LastQuestProgress = questProgress.Value
    end)
end

TrackKills()
